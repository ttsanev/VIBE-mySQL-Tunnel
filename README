VIBE mySQL Tunnel
	ver 1.0 => This version was created for a website and does not have a lot of functionality. Only the ones needed to cover this website's needs.
	ver 1.1 => I decided to extend the classes so they can be used for other pouposes.

Author: Tsanyo Tsanev
E-mail: me@ts-tsanev.net
	
Currently I am trying to include more functionalities in the classes so they can be more flexable and useable.

Below is a short description the two classes and their methods.

If you have any suggestions, questions, bug reports, etc. feel free to write me a message.

vibe-server.php
	This file is placed on the machine acting as a server. The class receives the HTTP request, executes the queries and returns the result. In order for the class to work it must me initialized in a file that sends no other output and the listen() method must me called. 
		Example:
    	<?php
    	include('vibe-server.php');
  		$serv = new vibe_tunnel();
    	$serv-listen(); 
    	?>
 
vibe-client.php
   	The client class on the other hand has much more functionality. It stores a list of the operations that must be executed on the server and when the execute method is called it sends them to the URL and parses the result. Here is the list of the public methods it features:
   	- CLASS INSTALATION - new vibe_tunnel_cli($tunnel_host, $tunnel_url, $host, $username, $password, $database)
   		* $tunnel_host - the domain name of the remote computer or IP address
   		* $tunnel_url - the "relative" URI of the service (ex. /services/vibe-mysql-tunnel.php)
   		* $host - the hostname for the mySQL databese on the remote machine (ex. localhost)
   		* $username - the username for the mySQL server
   		* $password - the password
   		* $database - the name of the database to be used
	- check_connection() - its function sends a query to the server to check if there is connection to it, if the URL is correct, if the username and password for the mySQL are correct and so on. If this method returns true the execution of the program continues.
	- query($query, $return_type) - this method queue the query you want to send in an internal variable. It accepts two parameters - $query is a string of the mySQL query you want to send. The return type is an optional string parameter that specifies the type of the result returned (for select and show queries) - it can be VIBE-NUM for numeric array, VIBE-ASSOC for an associative array or VIBE-BOTH for both. I decided to specify the result type before the query is executed to avoid receiving data from the server which will never be used. Thus to speed up the process.
	- exec() - this method executes the queue of queries. It creates the XML file and send it to the server. If all goes OK the method returns true. If an error occurs false is returned and maybe (depending on the error) a message is displayed.
	- fetch_array($type) - returns the result array for the current query*(1). $type can be a string either 'assoc' or 'numeric'. If array type is not found the available one is returned.
	- fetch_assoc() - alias to fetch_array('assoc')
	- fetch_numeric() - alias to fetch_array('numeric')
	- insert_id() - returns the insert id if the current query has one.
	- affected_rows() - returns the result of mysql_affected_rows() if the current query has one
	- num_rows() - returns the result of mysql_num_rows() if the query has one
	- get_xml() - returns a string containg the raw XML retuned from the server
	- get_report() - returns a string containing a detailed report of the operation of the class.
	- next_transaction() - moves the pointer to the result set for the next query.
	- count_transactions() - retuns the number of queries executed.
	- get_transaction_error() - returns a string with the error (if any) that occured on the server while executing the query.
	
	The array returned from the fetch_array has the following structure 
		array( 
			(int) 'the row index' => 
				array(
					(sting) 'field name'=>'field value',  // for associative array or ...
					(int) 'field index' => 'field value', // for numeric array
					[...]
				), 
			[...]
		);
	
Notes:
	1. The use of this web service can be a hole in the security of your mysql server. It uses a very simple authentication and personally I recommend if you are going to use it to make some changes. The easyest way to hack something is if you know how it works and these sources are public :).
	2. For security reasons the username and password for the mySQL server are send from the client and only used by the server class.
	3. I am still working on improving the operation and flexability of these classes.
		
------------------------------------
(1) - each operation set with query() has an unique index in the result set. When exec() the class parses the results and sets the pointer to the first query executed, therefore all the methods that return infromation for the query use this query's data. The next_transaction() method moves the pointer to the result of the next query. If there is no next query false is returned.